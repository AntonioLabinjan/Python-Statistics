# Ovdje nema programskih odsječaka sve do napomene 3.3.16
# R
## Prva petlja (ugnježdene)
k <- 0
for (i1 in 1:n1) {
  for (i2 in 1:n2) {
    ...
    for (im in 1:nm) {
      k <- k + 1
    }
  }
}

## Druga petlja (1 ispod druge)
k <- 0
for (i1 in 1:n1) {
  k <- k + 1
}
for (i2 in 1:n2) {
  k <- k + 1
}
...
for (im in 1:nm) {
  k <- k + 1
}

# Python
## Prva petlja (ugnježdene)
k = 0
for i1 in range(1, n1 + 1):
    for i2 in range(1, n2 + 1):
        # ...
        for im in range(1, nm + 1):
            k += 1

## Druga petlja (1 ispod druge)
k = 0
for i1 in range(1, n1 + 1):
    k += 1
for i2 in range(1, n2 + 1):
    k += 1
# ...
for im in range(1, nm + 1):
    k += 1

# R
## Primjena R-a za računanje vjerojatnosti
# Računanje faktorijela od 15
print(factorial(15), digits = 15)

# Izračun binomnog koeficijenta (10 nad 4)
choose(10, 4)
R koristi funkciju factorial() za računanje faktorijela broja 15 i funkciju choose() za izračun binomnog koeficijenta "10 nad 4".
# Definiramo indekse ind
ind <- c(0:10)

# Izračun binomnih koeficijenata za 10 nad ind
result <- choose(10, ind)

# Python
Da bismo dobili ekvivalent u Pythonu za računanje faktorijela i binomnog koeficijenta, možemo koristiti biblioteku math. Ovdje je Python ekvivalent za oba izračuna:
import math

# Računanje faktorijela broja 15
fact_15 = math.factorial(15)
print(fact_15)

# Izračun binomnog koeficijenta "10 nad 4"
binomial_coef = math.comb(10, 4)
print(binomial_coef)

# R
Naravno, možemo izračunati razne vjerojatnosti i jesmo li izračunali ispravno možemo provjeriti pomoću generiranja slučajnih uzoraka korištenjem funkcije sample(). Ako želimo generirati uređeni uzorak od 5 brojeva od 10 dostupnih brojeva bez ponavljanja, koristimo sljedeći kod:
sample(10, 5)
Ovdje smo generirali uzorak 5 brojeva od 1 do 10. Sada možemo koristiti funkciju set.seed() za postavljanje početnog stanja generatora slučajnih brojeva kako bismo rezultate simulacije reproducirali.

Primjer:
set.seed(1)
sample(10, 5)
Ovo će nam dati isti uzorak svaki put kad postavimo sjeme generatora na 1.
set.seed(2022)
sample(10, 5)
Ovo će nam dati drugačiji uzorak kad postavimo sjeme generatora na 2022.

# Python
import random

# Generiraj uzorak od 5 brojeva od 1 do 10 bez ponavljanja
uzorak = random.sample(range(1, 11), 5)
print(uzorak)

import random

# Postavi sjeme generatora slučajnih brojeva na 1
random.seed(1)

# Generiraj uzorak od 5 brojeva od 1 do 10 bez ponavljanja
uzorak1 = random.sample(range(1, 11), 5)
print(uzorak1)

# Postavi sjeme generatora slučajnih brojeva na 2022
random.seed(2022)

# Generiraj drugačiji uzorak od 5 brojeva od 1 do 10 bez ponavljanja
uzorak2 = random.sample(range(1, 11), 5)
print(uzorak2)


# R
Ukoliko želimo kreirati veći broj uzoraka, možemo koristiti funkciju replicate
# Generiranje 13 uzoraka od po 5 nasumičnih brojeva od 1 do 10 bez ponavljanja
replicate(13, sample(10,5))

Možemo definirati i uzorke s ponavljanjem, tako da uključimo argument replace i postavimo ga na TRUE
replicate(13,sample(10,5,replace=TRUE))

# Python
U Pythonu koristimo funkciju random koju je potrebno importirati
import random

# Generiranje 13 uzoraka od po 5 nasumičnih brojeva od 1 do 10 bez ponavljanja
uzorci = [random.sample(range(1, 11), 5) for _ in range(13)]

import random

# Generiranje 13 uzoraka od po 5 nasumičnih brojeva od 1 do 10 s ponavljanjem
uzorci_s_ponavljanjem = [random.choices(range(1, 11), k=5) for _ in range(13)]

# R
# Generiranje uzorka znakova duljine 5 iz niza znakova a, b, c, d, e, f, g, h, i, j
uzorak_znakova <- sample(c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j"), 5, replace = TRUE)

# Ispis uzorka
uzorak_znakova

# Python
import random

# Generiranje uzorka znakova duljine 5 iz niza znakova a, b, c, d, e, f, g, h, i, j
niz_znakova = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]
uzorak_znakova = random.choices(niz_znakova, k=5)

# Ispis uzorka
print(uzorak_znakova)

#R
Ovaj kod prvo učitava paket "permute", a zatim koristi funkciju allPerms za generiranje svih permutacija iz vektora brojeva 1, 2 i 3. Rezultat će sadržavati sve permutacije tih brojeva.
library("permute")
allPerms(c(1,2,3))

R nam može pomoći u izračunu vjerojatnosti iz primjera 3.4.5(rođendani). Naime,za k=23 možemo jednostavno izračunati vjerojatnost da će barem dvoje od 23 ljudi imati rođendan na isti dan
# Broj ljudi
k <- 23

# Izračun vjerojatnosti da barem dvoje od 23 ljudi ima isti rođendan
p <- 1 - prod((365 - k + 1):365) / 365^k

# Ispis rezultata
cat("Tražena vjerojatnost je jednaka", p)

# Python
# Broj ljudi
k = 23

# Izračun vjerojatnosti da barem dvoje od 23 ljudi ima isti rođendan
p = 1 - (365 / 365)  # Početna vjerojatnost da nema zajedničkog rođendana

for i in range(k):
    p *= (365 - i) / 365  # Izračun vjerojatnosti da nema zajedničkog rođendana za svaku osobu

p = 1 - p  # Konačna vjerojatnost da barem dvoje ljudi imaju isti rođendan

# Ispis rezultata
print("Tražena vjerojatnost je jednaka", p)

# R
# Zanimljivo je da R ima ugrađene funkcije pbirthday() i qbirthday() koje računaju vjerojatnost rođendana.

# Izračunajmo vjerojatnost da će barem dvije osobe (od ukupno jako puno) imati rođendan istog dana.
vjerojatnost_za_23_osobe <- pbirthday(23)[1]
cat("Vjerojatnost da će barem dvije osobe od 23 imati rođendan istog dana je:", vjerojatnost_za_23_osobe, "\n")

# Također možemo izračunati minimalan broj ljudi koji trebaju biti prisutni da bi se s vjerojatnošću od 50% barem dvije osobe imale rođendan istog dana.
minimalan_broj_osoba <- qbirthday(0.5)[1]
cat("Minimalan broj osoba potreban za vjerojatnost od 50% da barem dvije osobe imaju rođendan istog dana je:", minimalan_broj_osoba, "\n")

# Ako želimo vjerojatnost da će barem dvije osobe imati rođendan istog dana, uz pretpostavku da se broj ljudi zaista zove "3", možemo to izračunati ovako:
vjerojatnost_sa_3_osobe <- pbirthday(23, coincide = 3)[1]
cat("Vjerojatnost da će barem dvije osobe imati rođendan istog dana uz pretpostavku da se broj ljudi zove '3' je:", vjerojatnost_sa_3_osobe, "\n")

# Također možemo izračunati minimalan broj ljudi koji trebaju biti prisutni da bi se s vjerojatnošću od 50% barem dvije osobe imale rođendan istog dana, uz pretpostavku da se broj ljudi zove "3".
minimalan_broj_osoba_sa_3_osobe <- qbirthday(0.5, coincide = 3)[1]
cat("Minimalan broj osoba potreban za vjerojatnost od 50% da barem dvije osobe imaju rođendan istog dana uz pretpostavku da se broj ljudi zove '3' je:", minimalan_broj_osoba_sa_3_osobe, "\n")

# Python
Python nema ugrađene funkcije za rođendane, ali može ih se ručno kreirati
# Funkcija za izračun vjerojatnosti da će barem dvije osobe (od ukupno jako puno) imati rođendan istog dana.
def vjerojatnost_rođendana(k):
    p = 1
    for i in range(k):
        p *= (365 - i) / 365
    return 1 - p

# Funkcija za izračun minimalnog broja ljudi potrebnog za postizanje vjerojatnosti od 50% da barem dvije osobe imaju rođendan istog dana.
def minimalni_broj_osoba(vjerojatnost):
    k = 0
    p = 1
    while p > 1 - vjerojatnost:
        k += 1
        p *= (365 - k) / 365
    return k

# Izračun vjerojatnosti za 23 osobe
vjerojatnost_za_23_osobe = vjerojatnost_rođendana(23)
print(f"Vjerojatnost da će barem dvije osobe od 23 imati rođendan istog dana je: {vjerojatnost_za_23_osobe}")

# Izračun minimalnog broja osoba za vjerojatnost od 50%
minimalan_broj_osoba = minimalni_broj_osoba(0.5)
print(f"Minimalan broj osoba potreban za vjerojatnost od 50% da barem dvije osobe imaju rođendan istog dana je: {minimalan_broj_osoba}")

# R
Ovaj R kod izračunava i prikazuje vjerojatnost "među ljudima barem dvoje ima isti rođendan" za broj ljudi od 1 do 100 na grafu. Oznake osi x su "Broj ljudi", a oznaka osi y je "Vjerojatnost višestrukih rođendana".
# Postavljanje margina za graf
par(mar = c(4, 4, 2, 2))

# Inicijalizacija vektora za pohranu vjerojatnosti
p <- numeric(100)

# Izračun vjerojatnosti za svaki broj ljudi od 1 do 100
for (k in 1:100) {
  p[k] <- 1 - prod((365 - k + 1):365) / 365^k
}

# Kreiranje grafa
plot(
  p,
  pch = 16,
  cex = 0.8,
  xlab = "Broj ljudi",
  ylab = "Vjerojatnost višestrukih rođendana"
)
# Python
Python koristi biblioteku Matplotlib za izradu grafa i matematičke operacije za izračun vjerojatnosti. Rezultat je graf koji prikazuje promjenu vjerojatnosti za različite brojeve ljudi.
import matplotlib.pyplot as plt
import math

# Inicijalizacija vektora za pohranu vjerojatnosti
p = []

# Izračun vjerojatnosti za svaki broj ljudi od 1 do 100
for k in range(1, 101):
    vjerojatnost = 1 - math.prod([(365 - i) / 365 for i in range(k)])
    p.append(vjerojatnost)

# Kreiranje grafa
plt.figure(figsize=(8, 6))
plt.plot(range(1, 101), p, marker='o', markersize=4, linestyle='-')
plt.xlabel("Broj ljudi")
plt.ylabel("Vjerojatnost višestrukih rođendana")
plt.title("Vjerojatnost višestrukih rođendana u ovisnosti o broju ljudi")
plt.grid(True)
plt.show()

# R
# Postavljanje širine konzole radi bolje čitljivosti
options(width = 75)

# Postavljanje početnog stanja generatora slučajnih brojeva (za reproduktivnost)
set.seed(42)

# Generiranje uzorka rođendana za 23 ljudi s ponavljanjem (moguće su iste vrijednosti)
rodjendani <- sample(1:365, 23, replace = TRUE)

# Ispis uzorka rođendana
rodjendani

# Python
import random

# Postavljanje početnog stanja generatora slučajnih brojeva (za reproduktivnost)
random.seed(42)

# Generiranje uzorka rođendana za 23 ljudi s ponavljanjem (moguće su iste vrijednosti)
rodjendani = [random.randint(1, 365) for _ in range(23)]

# Ispis uzorka rođendana
print(rodjendani)

# R

# Generiranje velikog broja simulacija
simulacije <- replicate(10^5, max(table(sample(1:365, 23, replace=TRUE)))

# Izračun postotka simulacija u kojima barem dvije osobe dijele isti rođendan
postotak_simulacija_s_dvostrukim_rodjendanom <- sum(simulacije >= 2) / 10^5

# Ispis rezultata simulacije i vjerojatnosti izračunate pomoću pbirthday
postotak_simulacija_s_dvostrukim_rodjendanom
pbirthday(23)[1]

# Python
import random
import numpy as np

# Postavljanje početnog stanja generatora slučajnih brojeva (za reproduktivnost)
random.seed(42)

# Generiranje velikog broja simulacija
broj_simulacija = 10**5
simulacije = [max(np.bincount([random.randint(1, 365) for _ in range(23)])) for _ in range(broj_simulacija)]

# Izračun postotka simulacija u kojima barem dvije osobe dijele isti rođendan
postotak_simulacija_s_dvostrukim_rodjendanom = sum(np.array(simulacije) >= 2) / broj_simulacija

# Ispis rezultata simulacije
print(postotak_simulacija_s_dvostrukim_rodjendanom)

# Ispis vjerojatnosti izračunate pomoću pbirthday
vjerojatnost_rođendana = 1 - np.prod(1 - np.arange(1, 366) / 365)
print(vjerojatnost_rođendana)
### TREĆE POGLAVLJE JE GOTOVO
