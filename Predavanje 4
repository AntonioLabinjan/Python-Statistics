Ovdje nema programskih djelova sve do djela 4.6 -> Primjena R-a za računanje uvjetnih vjerojatnosti
# R
Pomoću funkcija sample() i replicate() možemo simulirati bacanje kockice
# Postavljanje početnog stanja generatora slučajnih brojeva (za reproduktivnost)
set.seed(42)

# Simulacija bacanja četiri kockice 12 puta
DePom <- replicate(12, sample(6, 4, replace = TRUE))

# Ispis rezultata simulacije
DePom
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
 [1,]    1    2    1    6    3    4    4    2    3     4     4     2
 [2,]    5    4    4    4    1    5    2    1    6     6     5     3
 [3,]    1    2    1    2    1    5    4    2    2     2     4     1
 [4,]    1    2    5    2    3    5    3    6    4     5     2     2

Sjetimo se da bacanja s ponavljanjem simuliramo tako da u funkciji sample postavimo argument replace = TRUE. Funkcija set.seed služi za postavljanje početnog stanja generatora pseudoslučajnih brojeva u R, što nam omogućava reproducibilnost generiranih brojeva. Ova aproksimacija se koristi za simuliranje neovisnih bacanja ili izvlačenja.

# Dijeljenje svih elemenata varijable DePom s 6
DePom6 <- DePom %/% 6

# Ispis rezultata dijeljenja
print(DePom6)

      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
 [1,]    0    0    0    1    0    0    0    0    0     0     0     0
 [2,]    0    0    0    0    0    0    0    0    1     1     0     0
 [3,]    0    0    0    0    0    0    0    0    0     0     0     0
 [4,]    0    0    0    0    0    0    0    1    0     0     0     0

# Korištenje funkcije apply za izračun maksimalnih vrijednosti u svakom stupcu
maksimalne_vrijednosti <- apply(DePom6, 2, FUN = max)

# Ispis maksimalnih vrijednosti
print(maksimalne_vrijednosti)
 [1] 0 0 0 1 0 0 0 1 1 1 0

# Možemo izračunati i prosječnu vjerojatnost kod višestrukog bacanja kockica
# Izračunajte prosječnu vjerojatnost višestrukog bacanja kockica
prosjecna_vjerojatnost <- sum(apply(DePom6, 2, FUN = max)) / 12

# Ispis prosječne vjerojatnosti
print(prosjecna_vjerojatnost)

Ovaj ispis će prikazati prosječnu vjerojatnost:
[1] 0.3333333

Sada ponovimo isti postupak s 100.000 ponavljanja:
# Postavljanje početnog stanja generatora slučajnih brojeva
set.seed(42)

# Generiranje 100.000 simulacija višestrukog bacanja kockica
DeMere1 <- replicate(100000, sample(6, 4, replace = TRUE))

# Izračun maksimalnih vrijednosti u svakom nizu i suma tih maksimalnih vrijednosti
maksimalne_vrijednosti <- apply(DeMere1 %/% 6, 2, FUN = max)
prosjecna_vjerojatnost_100k <- sum(maksimalne_vrijednosti) / 100000

# Ispis prosječne vjerojatnosti za 100.000 ponavljanja
print(prosjecna_vjerojatnost_100k)

Ovaj ispis će prikazati prosječnu vjerojatnost za 100.000 ponavljanja:
[1] 0.51748
Ovaj je ispis dobiven na temelju puno više ponavljanja i bliži je točnoj vrijednosti

# Python
import numpy as np

# Postavljanje početnog stanja generatora slučajnih brojeva
np.random.seed(42)

# Simulacija bacanja četiri kockice 12 puta
broj_bacanja = 12
broj_kockica = 4
DePom = np.random.choice(6, size=(broj_kockica, broj_bacanja), replace=True)

# Ispis rezultata simulacije
print(DePom)

# Dijeljenje svih elemenata matrice DePom s 6
DePom6 = DePom // 6

# Ispis rezultata dijeljenja
print(DePom6)

# Izračun maksimalnih vrijednosti u svakom stupcu
maksimalne_vrijednosti = np.max(DePom6, axis=0)

# Ispis maksimalnih vrijednosti
print(maksimalne_vrijednosti)

# Izračun prosječne vjerojatnosti kod višestrukog bacanja kockica
prosjecna_vjerojatnost = np.mean(maksimalne_vrijednosti)

# Ispis prosječne vjerojatnosti
print(prosjecna_vjerojatnost)

# Ponovno simulirajte s 100.000 ponavljanja
broj_simulacija = 100000
DeMere1 = np.random.choice(6, size=(broj_kockica, broj_simulacija), replace=True)

# Izračun maksimalnih vrijednosti u svakom nizu i prosječna vjerojatnost
maksimalne_vrijednosti_100k = np.max(DeMere1 // 6, axis=0)
prosjecna_vjerojatnost_100k = np.mean(maksimalne_vrijednosti_100k)

# Ispis prosječne vjerojatnosti za 100.000 ponavljanja
print(prosjecna_vjerojatnost_100k)

# R
# Postavljanje početnog stanja generatora slučajnih brojeva
set.seed(42)

# Generiranje 100.000 simulacija za 24 bacanja dviju kockica
DeMere21 <- replicate(100000, sample(6, 24, replace = TRUE))
DeMere22 <- replicate(100000, sample(6, 24, replace = TRUE))

# Izračun maksimalnih vrijednosti za svaku simulaciju
maks2 <- apply((DeMere21 * DeMere22) %/% 36, 2, FUN = max)

# Ispis prosječne vjerojatnosti da će pasti dvije šestice nakon 24 bacanja
prosjecna_vjerojatnost_24_bacanja <- sum(maks2) / 100000
print(prosjecna_vjerojatnost_24_bacanja)

# Python
import numpy as np

# Postavljanje početnog stanja generatora slučajnih brojeva
np.random.seed(42)

# Broj simulacija
n_simulations = 100000

# Broj bacanja i broj kockica
n_bacanja = 24
n_kockica = 2

# Simulacija bacanja kockica
kockice = np.random.randint(1, 7, size=(n_simulations, n_bacanja, n_kockica))

# Provjerava jesu li oba rezultata u svakom bacanju jednaka 6 (šestice)
is_šestica = (kockice == 6).all(axis=2)

# Računanje maksimalnog broja šestica u 24 bacanja
maksimalne_šestice = is_šestica.sum(axis=1)

# Računanje prosječne vjerojatnosti
prosjecna_vjerojatnost = (maksimalne_šestice >= 2).mean()

print(f"Prosječna vjerojatnost da će pasti dvije šestice nakon 24 bacanja: {prosjecna_vjerojatnost:.5f}")

# R
# Postavljanje početnog stanja generatora slučajnih brojeva (za reproduktivnost)
set.seed(42)

# Simulacija bacanja četiri kockice 12 puta
DePom <- replicate(12, sample(6, 4, replace = TRUE))

# Ispis rezultata simulacije
DePom

      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
 [1,]    1    2    1    6    3    4    4    2    3     4     4     2
 [2,]    5    4    4    4    1    5    2    1    6     6     5     3
 [3,]    1    2    1    2    1    5    4    2    2     2     4     1
 [4,]    1    2    5    2    3    5    3    6    4     5     2     2

# Python
import random

# Postavljanje početnog stanja generatora slučajnih brojeva (za reproduktivnost)
random.seed(42)

# Simulacija bacanja četiri kockice 12 puta
DePom = [[random.randint(1, 6) for _ in range(4)] for _ in range(12)]

# Ispis rezultata simulacije
for row in DePom:
    print(row)
