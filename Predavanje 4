Ovdje nema programskih djelova sve do djela 4.6 -> Primjena R-a za računanje uvjetnih vjerojatnosti
# R
Pomoću funkcija sample() i replicate() možemo simulirati bacanje kockice
# Postavljanje početnog stanja generatora slučajnih brojeva (za reproduktivnost)
set.seed(42)

# Simulacija bacanja četiri kockice 12 puta
DePom <- replicate(12, sample(6, 4, replace = TRUE))

# Ispis rezultata simulacije
DePom
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
 [1,]    1    2    1    6    3    4    4    2    3     4     4     2
 [2,]    5    4    4    4    1    5    2    1    6     6     5     3
 [3,]    1    2    1    2    1    5    4    2    2     2     4     1
 [4,]    1    2    5    2    3    5    3    6    4     5     2     2

Sjetimo se da bacanja s ponavljanjem simuliramo tako da u funkciji sample postavimo argument replace = TRUE. Funkcija set.seed služi za postavljanje početnog stanja generatora pseudoslučajnih brojeva u R, što nam omogućava reproducibilnost generiranih brojeva. Ova aproksimacija se koristi za simuliranje neovisnih bacanja ili izvlačenja.

# Dijeljenje svih elemenata varijable DePom s 6
DePom6 <- DePom %/% 6

# Ispis rezultata dijeljenja
print(DePom6)

      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
 [1,]    0    0    0    1    0    0    0    0    0     0     0     0
 [2,]    0    0    0    0    0    0    0    0    1     1     0     0
 [3,]    0    0    0    0    0    0    0    0    0     0     0     0
 [4,]    0    0    0    0    0    0    0    1    0     0     0     0

# Korištenje funkcije apply za izračun maksimalnih vrijednosti u svakom stupcu
maksimalne_vrijednosti <- apply(DePom6, 2, FUN = max)

# Ispis maksimalnih vrijednosti
print(maksimalne_vrijednosti)
 [1] 0 0 0 1 0 0 0 1 1 1 0

# Možemo izračunati i prosječnu vjerojatnost kod višestrukog bacanja kockica
# Izračunajte prosječnu vjerojatnost višestrukog bacanja kockica
prosjecna_vjerojatnost <- sum(apply(DePom6, 2, FUN = max)) / 12

# Ispis prosječne vjerojatnosti
print(prosjecna_vjerojatnost)

Ovaj ispis će prikazati prosječnu vjerojatnost:
[1] 0.3333333

Sada ponovimo isti postupak s 100.000 ponavljanja:
# Postavljanje početnog stanja generatora slučajnih brojeva
set.seed(42)

# Generiranje 100.000 simulacija višestrukog bacanja kockica
DeMere1 <- replicate(100000, sample(6, 4, replace = TRUE))

# Izračun maksimalnih vrijednosti u svakom nizu i suma tih maksimalnih vrijednosti
maksimalne_vrijednosti <- apply(DeMere1 %/% 6, 2, FUN = max)
prosjecna_vjerojatnost_100k <- sum(maksimalne_vrijednosti) / 100000

# Ispis prosječne vjerojatnosti za 100.000 ponavljanja
print(prosjecna_vjerojatnost_100k)

Ovaj ispis će prikazati prosječnu vjerojatnost za 100.000 ponavljanja:
[1] 0.51748
Ovaj je ispis dobiven na temelju puno više ponavljanja i bliži je točnoj vrijednosti

# Python
import numpy as np

# Postavljanje početnog stanja generatora slučajnih brojeva
np.random.seed(42)

# Simulacija bacanja četiri kockice 12 puta
broj_bacanja = 12
broj_kockica = 4
DePom = np.random.choice(6, size=(broj_kockica, broj_bacanja), replace=True)

# Ispis rezultata simulacije
print(DePom)

# Dijeljenje svih elemenata matrice DePom s 6
DePom6 = DePom // 6

# Ispis rezultata dijeljenja
print(DePom6)

# Izračun maksimalnih vrijednosti u svakom stupcu
maksimalne_vrijednosti = np.max(DePom6, axis=0)

# Ispis maksimalnih vrijednosti
print(maksimalne_vrijednosti)

# Izračun prosječne vjerojatnosti kod višestrukog bacanja kockica
prosjecna_vjerojatnost = np.mean(maksimalne_vrijednosti)

# Ispis prosječne vjerojatnosti
print(prosjecna_vjerojatnost)

# Ponovno simulirajte s 100.000 ponavljanja
broj_simulacija = 100000
DeMere1 = np.random.choice(6, size=(broj_kockica, broj_simulacija), replace=True)

# Izračun maksimalnih vrijednosti u svakom nizu i prosječna vjerojatnost
maksimalne_vrijednosti_100k = np.max(DeMere1 // 6, axis=0)
prosjecna_vjerojatnost_100k = np.mean(maksimalne_vrijednosti_100k)

# Ispis prosječne vjerojatnosti za 100.000 ponavljanja
print(prosjecna_vjerojatnost_100k)

# R
# Postavljanje početnog stanja generatora slučajnih brojeva
set.seed(42)

# Generiranje 100.000 simulacija za 24 bacanja dviju kockica
DeMere21 <- replicate(100000, sample(6, 24, replace = TRUE))
DeMere22 <- replicate(100000, sample(6, 24, replace = TRUE))

# Izračun maksimalnih vrijednosti za svaku simulaciju
maks2 <- apply((DeMere21 * DeMere22) %/% 36, 2, FUN = max)

# Ispis prosječne vjerojatnosti da će pasti dvije šestice nakon 24 bacanja
prosjecna_vjerojatnost_24_bacanja <- sum(maks2) / 100000
print(prosjecna_vjerojatnost_24_bacanja)

# Python
import numpy as np

# Postavljanje početnog stanja generatora slučajnih brojeva
np.random.seed(42)

# Broj simulacija
n_simulations = 100000

# Broj bacanja i broj kockica
n_bacanja = 24
n_kockica = 2

# Simulacija bacanja kockica
kockice = np.random.randint(1, 7, size=(n_simulations, n_bacanja, n_kockica))

# Provjerava jesu li oba rezultata u svakom bacanju jednaka 6 (šestice)
is_šestica = (kockice == 6).all(axis=2)

# Računanje maksimalnog broja šestica u 24 bacanja
maksimalne_šestice = is_šestica.sum(axis=1)

# Računanje prosječne vjerojatnosti
prosjecna_vjerojatnost = (maksimalne_šestice >= 2).mean()

print(f"Prosječna vjerojatnost da će pasti dvije šestice nakon 24 bacanja: {prosjecna_vjerojatnost:.5f}")

# R
# Postavljanje početnog stanja generatora slučajnih brojeva (za reproduktivnost)
set.seed(42)

# Simulacija bacanja četiri kockice 12 puta
DePom <- replicate(12, sample(6, 4, replace = TRUE))

# Ispis rezultata simulacije
DePom

      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
 [1,]    1    2    1    6    3    4    4    2    3     4     4     2
 [2,]    5    4    4    4    1    5    2    1    6     6     5     3
 [3,]    1    2    1    2    1    5    4    2    2     2     4     1
 [4,]    1    2    5    2    3    5    3    6    4     5     2     2

# Python
import random

# Postavljanje početnog stanja generatora slučajnih brojeva (za reproduktivnost)
random.seed(42)

# Simulacija bacanja četiri kockice 12 puta
DePom = [[random.randint(1, 6) for _ in range(4)] for _ in range(12)]

# Ispis rezultata simulacije
for row in DePom:
    print(row)

# R
# Izračun maksimalnih vrijednosti u svakom stupcu
DePom2 <- apply(DePom, 2, FUN = max)

# Ispis maksimalnih vrijednosti
DePom2
[1] 5 4 5 6 3 5 4 6 6 6 5 5

# Izračun postotka puta kada je maksimalna vrijednost 6
sum(DePom2 == 6) / 12
[1] 0.3333333

# Python
import numpy as np

# Generiranje uzorka podataka
np.random.seed(42)
DePom = np.random.randint(1, 7, size=(12, 12))

# Izračun maksimalnih vrijednosti u svakom stupcu
DePom2 = np.max(DePom, axis=0)

# Ispis maksimalnih vrijednosti
print(DePom2)

# Izračun postotka puta kada je maksimalna vrijednost 6
count_6 = np.sum(DePom2 == 6)
percentage_6 = count_6 / 12
print(percentage_6)

# R
# Postavljamo širinu konzole radi bolje čitljivosti
options(width=75)

# Prikazujemo logički vektor koji označava je li maksimalna vrijednost u svakom stupcu jednaka 6
DePom2 == 6

# Računamo broj puta kada je maksimalna vrijednost 6
sum(DePom2 == 6)

# Postavljamo početno stanje generatora slučajnih brojeva
set.seed(42)

# Generiramo 100,000 simulacija bacanja kockica
DeMere1 <- replicate(100000, sample(6, 4, replace=TRUE))

# Računamo postotak puta kada je maksimalna vrijednost 6
sum(apply(DeMere1, 2, FUN = max) == 6) / 100000

# Python
import numpy as np

# Postavljamo širinu za bolju čitljivost
np.set_printoptions(linewidth=75)

# Generiramo simulaciju bacanja kockica
np.random.seed(42)
DePom = np.random.randint(1, 7, size=(12, 4))

# Ispisujemo logički vektor koji označava jesu li maksimalne vrijednosti u svakom stupcu jednake 6
print(DePom == 6)

# Računamo broj puta kada je maksimalna vrijednost 6
print(np.sum(DePom == 6))

# Generiramo simulacije bacanja kockica
DeMere1 = np.random.randint(1, 7, size=(100000, 4))

# Računamo postotak puta kada je maksimalna vrijednost 6
print(np.sum(np.max(DeMere1, axis=1) == 6) / 100000)

# R
# Postavljamo početno stanje generatora slučajnih brojeva
set.seed(42)

# Postavljamo broj ponavljanja i broj bacanja
brpon <- 12
brbac <- 4
brojac <- 0

# Generiramo simulaciju bacanja kockica
DePom <- replicate(brpon, sample(6, brbac, replace = TRUE))

# Računamo procijenjenu vjerojatnost korištenjem petlji i if-ova
for (i in 1:brpon) {
  j <- 1
  while (j <= brbac) {
    if (DePom[j, i] == 6) {
      brojac <- brojac + 1
      j <- brbac + 1
    } else
      j <- j + 1
  }
}

# Ispisujemo procijenjenu vjerojatnost
cat("Procjenjena vjerojatnost je", brojac / brpon)

# Python
import numpy as np

# Postavljamo početno stanje generatora slučajnih brojeva
np.random.seed(42)

# Postavljamo broj ponavljanja i broj bacanja
brpon = 12
brbac = 4
brojac = 0

# Generiramo simulaciju bacanja kockica
DePom = np.random.randint(1, 7, size=(brbac, brpon))

# Računamo procijenjenu vjerojatnost korištenjem petlji i if-ova
for i in range(brpon):
    j = 0
    while j < brbac:
        if DePom[j, i] == 6:
            brojac += 1
            j = brbac
        else:
            j += 1

# Ispisujemo procijenjenu vjerojatnost
print("Procijenjena vjerojatnost je", brojac / brpon)

# R
# Postavljanje početnog stanja generatora slučajnih brojeva
set.seed(42)

# Generiranje niza dij1 koji sadrži 20 nezavisnih bacanja prvog djeteta
dij1 <- sample(c(0, 1), 20, replace = TRUE)

# Generiranje niza dij2 koji sadrži 20 nezavisnih bacanja drugog djeteta
dij2 <- sample(c(0, 1), 20, replace = TRUE)

# Formiranje vektora dijoba koji označava je li barem jedno dijete žensko
dijoba <- dij1 * dij2

# Formiranje podataka o djeci
dijpom <- data.frame(dij1, dij2)

# Računanje vektora dijjedno koji označava imaju li oba djeteta barem jedno žensko dijete
dijjedno <- apply(dijpom, 1, FUN = max)

# Izračun uvjetne vjerojatnosti
cat("Tražena uvjetna vjerojatnost je", sum(dijoba) / sum(dijjedno))

# Python
import random

# Postavljanje početnog stanja generatora slučajnih brojeva
random.seed(42)

# Generiranje niza dij1 koji sadrži 20 nezavisnih bacanja prvog djeteta
dij1 = [random.choice([0, 1]) for _ in range(20)]

# Generiranje niza dij2 koji sadrži 20 nezavisnih bacanja drugog djeteta
dij2 = [random.choice([0, 1]) for _ in range(20)]

# Formiranje vektora dijoba koji označava je li barem jedno dijete žensko
dijoba = [d1 * d2 for d1, d2 in zip(dij1, dij2)]

# Formiranje podataka o djeci
dijpom = list(zip(dij1, dij2))

# Računanje vektora dijjedno koji označava imaju li oba djeteta barem jedno žensko dijete
dijjedno = [max(d1, d2) for d1, d2 in dijpom]

# Izračun uvjetne vjerojatnosti
print("Tražena uvjetna vjerojatnost je", sum(dijoba) / sum(dijjedno))

# R
set.seed(42)

# Broj slučajeva u kojima barem jedno dijete je žensko
nC <- sum(dij1 == 1 | dij2 == 1)

# Broj slučajeva u kojima oba djeteta su ženska
nAC <- sum(dij1 == 1 & dij2 == 1)

# Izračun uvjetne vjerojatnosti
cat("Tražena uvjetna vjerojatnost je", nAC / nC)

# Python
import numpy as np

# Postavljanje početnog stanja generatora slučajnih brojeva
np.random.seed(42)

# Generiranje niza dij1 koji sadrži 20 nezavisnih bacanja prvog djeteta
dij1 = np.random.choice([0, 1], 20, replace=True)

# Generiranje niza dij2 koji sadrži 20 nezavisnih bacanja drugog djeteta
dij2 = np.random.choice([0, 1], 20, replace=True)

# Izračun broja slučajeva u kojima barem jedno dijete je žensko
nC = np.sum((dij1 == 1) | (dij2 == 1))

# Izračun broja slučajeva u kojima oba djeteta su ženska
nAC = np.sum((dij1 == 1) & (dij2 == 1))

# Izračun uvjetne vjerojatnosti
print("Tražena uvjetna vjerojatnost je", nAC / nC)

# R
set.seed(42)

dij1 <- sample(c(0, 1), 100000, replace=TRUE)
dij2 <- sample(c(0, 1), 100000, replace=TRUE)

dijoba <- dij1 * dij2
dijpom <- data.frame(dij1, dij2)
dijjedno <- apply(dijpom, 1, FUN = max)

cat("Tražena uvjetna vjerojatnost je", sum(dijoba) / sum(dijjedno))

set.seed(42)

dij1 <- sample(c(0, 1), 100000, replace=TRUE)
dij2 <- sample(c(0, 1), 100000, replace=TRUE)

nC <- sum(dij1 == 1 | dij2 == 1)
nAC <- sum(dij1 == 1 & dij2 == 1)

cat("Tražena uvjetna vjerojatnost je", nAC / nC)

# Python
import random

random.seed(42)

dij1 = [random.choice([0, 1]) for _ in range(100000)]
dij2 = [random.choice([0, 1]) for _ in range(100000)]

dijoba = [d1 * d2 for d1, d2 in zip(dij1, dij2)]
dijpom = list(zip(dij1, dij2))
dijjedno = [max(d1, d2) for d1, d2 in dijpom]

uvjetna_vjerojatnost = sum(dijoba) / sum(dijjedno)

print(f"Tražena uvjetna vjerojatnost je {uvjetna_vjerojatnost}")

import random

random.seed(42)

dij1 = [random.choice([0, 1]) for _ in range(100000)]
dij2 = [random.choice([0, 1]) for _ in range(100000)]

nC = sum(d1 == 1 or d2 == 1 for d1, d2 in zip(dij1, dij2))
nAC = sum(d1 == 1 and d2 == 1 for d1, d2 in zip(dij1, dij2))

uvjetna_vjerojatnost = nAC / nC

print(f"Tražena uvjetna vjerojatnost je {uvjetna_vjerojatnost}")

# R
set.seed(42)
kug <- 0

nov <- sample(c(0, 1), 100000, replace=TRUE, prob=c(0.45, 0.55))

for (i in 1:100000) {
  if (nov[i] == 0) {
    kug[i] <- sample(c("p", "c"), 1, replace=TRUE, prob = c(1/3, 2/3))
  } else {
    kug[i] <- sample(c("p", "c"), 1, replace=TRUE, prob = c(2/3, 1/3))
  }
}

nA <- sum(kug == "p")
nAH <- sum(nov == 0 & kug == "p")

cat("Tražena uvjetna vjerojatnost je", nAH / nA)

# Python
import random

random.seed(42)
kug = [0] * 100000

nov = [random.choices([0, 1], [0.45, 0.55])[0] for _ in range(100000)]

for i in range(100000):
    if nov[i] == 0:
        kug[i] = random.choices(["p", "c"], [1/3, 2/3])[0]
    else:
        kug[i] = random.choices(["p", "c"], [2/3, 1/3])[0]

nA = kug.count("p")
nAH = sum(1 for i in range(100000) if nov[i] == 0 and kug[i] == "p")

print("Tražena uvjetna vjerojatnost je", nAH / nA)
